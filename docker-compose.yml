version: '3.8'

services:
  nest-docker:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DATABASE_HOST=host.docker.internal
      - DATABASE_PORT=3306
      - REDIS_HOST=redis-stack
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka-0:9092 # Kafka 브로커 주소
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - redis-stack
      - kafka-0
    networks:
      - kafka-network
      - default

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    ports:
      - "6379:6379"    # Redis 서버 포트
      - "8001:8001"    # Redis Insight 포트
    environment:
      - REDIS_ARGS=--save 60 1000 --appendonly yes  # 데이터 지속성을 위한 설정
      - REDISTIMESERIES_ARGS=RETENTION_POLICY=20    # 시계열 데이터 보존 정책
    volumes:
      - ./local-data:/data    # 로컬 데이터 볼륨 마운트
    restart: unless-stopped

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"  # InfluxDB 포트
    environment:
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin123
      - INFLUXDB_DB=k6  # 기본 데이터베이스
    volumes:
      - ./influxdb-data:/var/lib/influxdb
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"  # Grafana 대시보드 포트
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123  # 기본 관리자 계정
    volumes:
      - ./grafana-data:/var/lib/grafana
    depends_on:
      - influxdb
    restart: unless-stopped

  k6:
    image: grafana/k6:latest
    container_name: k6
    depends_on:
      - influxdb
    entrypoint: ["k6", "run", "-o", "influxdb=http://influxdb:8086/k6", "/scripts/test_getAvailableSeats.js"]
    volumes:
      - ./test/k6:/scripts  # 로컬의 ./test/k6 디렉터리를 컨테이너 내부 /scripts로 마운트

  kafka-0:
    image: bitnami/kafka:3.7
    ports:
      - '9094:9094'
    environment:
      # KRaft 설정
      KAFKA_KRAFT_CLUSTER_ID: z6sXmGHyR1qVTyyl9XXr0g
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093
      KAFKA_CFG_NODE_ID: 0

      # 리스너 설정
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # 클러스터 설정
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_CFG_MIN_INSYNC_REPLICAS: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka-volume-0:/bitnami
    networks:
      - kafka-network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    platform: linux/amd64
    ports:
      - '9090:9000'
    depends_on:
      - kafka-0
    environment:
      - KAFKA_BROKERCONNECT=kafka-0:9092
      - JVM_OPTS=-Xms32M -Xmx64M
      - SERVER_SERVLET_CONTEXTPATH=/
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - '9091:8080'
    depends_on:
      - kafka-0
    environment:
      - KAFKA_CLUSTERS_0_NAME=KRaft Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-0:9092
      - DYNAMIC_CONFIG_ENABLED=true
    networks:
      - kafka-network

volumes:
  kafka-volume-0:
    driver: local

networks:
  kafka-network:
    driver: bridge
